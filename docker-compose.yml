# docker-compose.yml - 1분 이내 배포 최적화
# 🚀 ULTRA FAST VERSION

services:
  users-app:
    build:
      context: .
      dockerfile: apps/Dockerfile
      args:
        - YARN_WORKSPACE=apps
    image: ${ECR_REGISTRY}/users-app:latest
    container_name: apps
    ports:
      - '3000:3000'
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      # 🚀 메모리 최적화
      - NODE_OPTIONS=--max-old-space-size=2048
    networks:
      - shared-net
    restart: unless-stopped
    # 🚀 고속 헬스체크 (간격 단축)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 15s
      timeout: 5s
      retries: 2
      start_period: 20s
    # 🚀 로그 최적화 (크기 제한)
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    # 🚀 리소스 제한 (ARM64 최적화)
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

  admin-app:
    build:
      context: .
      dockerfile: admin/Dockerfile
    image: ${ECR_REGISTRY}/admin-app:latest
    container_name: admin
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=production
    networks:
      - shared-net
    restart: unless-stopped
    # 🚀 고속 헬스체크 (React는 더 빠름)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 10s
      timeout: 3s
      retries: 2
      start_period: 10s
    # 🚀 로그 최적화
    logging:
      driver: "json-file"
      options:
        max-size: "3m"
        max-file: "2"
    # 🚀 리소스 제한 (정적 파일 서빙)
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

networks:
  shared-net:
    external: true