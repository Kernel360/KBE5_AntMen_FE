name: 'CI/CD: Build & Deploy to EC2'

on:
  push:
    branches: [develop]
    # paths:
    #   - 'apps/**'
    #   - 'admin/**'

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
    strategy:
      matrix:
        include:
          - name: users-app
            dockerfile: apps/Dockerfile
            context: .
            image: users-app
            repository: users-app
          - name: admin-app
            dockerfile: admin/Dockerfile
            context: .
            image: admin-app
            repository: admin-app

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Yarn
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build apps
        run: |
          yarn workspace apps build || true
          yarn workspace admin build || true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names ${{ matrix.repository }} || aws ecr create-repository --repository-name ${{ matrix.repository }}
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry: ${{ env.ECR_REGISTRY }}

      - name: Build Docker image
        run: |
          docker buildx build -f ${{ matrix.dockerfile }} \
          --build-arg NEXT_PUBLIC_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
          --build-arg NEXT_PUBLIC_GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }} \
          --build-arg NEXT_PUBLIC_GOOGLE_RESPONSE_TYPE=${{ secrets.GOOGLE_RESPONSE_TYPE }} \
          --build-arg NEXT_PUBLIC_GOOGLE_SCOPE=${{ secrets.GOOGLE_SCOPE }} \
          --build-arg NEXT_PUBLIC_GOOGLE_AUTH_URL=${{ secrets.GOOGLE_AUTH_URL }} \
          --platform linux/amd64 \
          --load \
          -t $ECR_REGISTRY/${{ matrix.image }}:latest .

      - name: Push Docker image
        run: |
          docker push $ECR_REGISTRY/${{ matrix.image }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    strategy:
      matrix:
        include:
          - image: users-app
          - image: admin-app
    env:
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clear client folder before upload
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            sudo rm -rf /home/ubuntu/apps/client
            mkdir -p /home/ubuntu/apps/client
            sudo chown -R ubuntu:ubuntu /home/ubuntu/apps/client

      - name: Create .env file
        run: |
          echo "KAKAO_REST_API_KEY=${{ secrets.KAKAO_REST_API_KEY }}" > .env
          echo "ECR_REGISTRY=${{ secrets.ECR_REGISTRY }}" >> .env
          echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env
          echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" >> .env
          # 필요에 따라 아래에 추가 환경변수 계속 추가

      - name: Copy docker-compose.yml and .env
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: 'docker-compose.yml,.env'
          target: ~/apps/client

      - name: SSH into EC2 and restart containers
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd ~/apps/client

            # .env 파일을 현재 쉘에 적용
            set -a
            source .env
            set +a

            echo "KAKAO_REST_API_KEY 값: $KAKAO_REST_API_KEY"
            echo "ECR_REGISTRY 값: $ECR_REGISTRY"
            echo "NEXTAUTH_SECRET 값: $NEXTAUTH_SECRET"
            echo "NEXTAUTH_URL 값: $NEXTAUTH_URL"

            echo "정리 전 디스크 사용량:"
            df -h /

            echo "미사용 리소스 정리 중..."
            docker container prune -f
            docker image prune -f
            docker network prune -f

            echo "정리 후 디스크 사용량:"
            df -h /

            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY

            echo "Pulling image: ${{ matrix.image }}"
            docker pull $ECR_REGISTRY/${{ matrix.image }}:latest || { echo "이미지 pull 실패"; exit 1; }

            echo "Stopping & restarting ${{ matrix.image }}"
            docker compose down ${{ matrix.image }} || true
            docker compose up -d ${{ matrix.image }}
