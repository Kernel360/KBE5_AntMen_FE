name: "CI/CD: Build & Deploy to EC2"

on:
  push:
    branches: [feature/#1-cicd]
    # paths:
    #   - 'apps/**'
    #   - 'packages/**'
    #   - 'package.json'
    #   - 'yarn.lock'

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: users-app
            dockerfile: apps/Dockerfile
            context: .
            image: users-app

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build apps
        run: yarn workspace apps build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names users-app || aws ecr create-repository --repository-name users-app

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        run: |
          docker build -f ${{ matrix.dockerfile }} -t $ECR_REGISTRY/users-app:latest ${{ matrix.context }}
          docker push $ECR_REGISTRY/users-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clear client folder before upload
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            sudo rm -rf ~/apps/client
            mkdir -p ~/apps/client
            sudo chown -R $USER:$USER ~/apps/client

      - name: Copy docker-compose.yml
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "docker-compose.yml"
          target: ~/apps/client

      - name: SSH into EC2 and restart containers
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd ~/apps/client

            cat <<EOF > .env
            ECR_REGISTRY=${{ secrets.ECR_REGISTRY }}
            EOF

            echo "정리 전 디스크 사용량:"
            df -h /

            echo "미사용 리소스 정리 중..."
            docker container prune -f
            docker image prune -f
            docker network prune -f

            echo "정리 후 디스크 사용량:"
            df -h /

            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

            docker pull ${{ secrets.ECR_REGISTRY }}/users-app:latest

            docker compose down
            docker compose up -d

            rm -f .env