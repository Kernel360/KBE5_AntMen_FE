name: 'CI/CD: Build & Deploy to EC2'

on:
  push:
    branches: [develop]
    paths:
      - 'apps/**'
      - 'admin/**'
      - '.github/workflows/**'
      - 'docker-compose.yml'
      - 'package.json'
      - 'yarn.lock'

permissions:
  id-token: write
  contents: read

env:
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: users-app
            dockerfile: apps/Dockerfile
            image: users-app
            repository: users-app
            needs_env: true
          - name: admin-app
            dockerfile: admin/Dockerfile
            image: admin-app
            repository: admin-app
            needs_env: false

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline

      - name: Build workspace
        run: |
          if [ "${{ matrix.name }}" = "users-app" ]; then
            yarn workspace apps build
          else
            CI=false yarn workspace admin build
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names ${{ matrix.repository }} 2>/dev/null || \
          aws ecr create-repository --repository-name ${{ matrix.repository }}

      - name: Build and Push Docker image
        run: |
          # Docker 기본 빌더로 설정 (Buildx 비활성화)
          export DOCKER_BUILDKIT=0
          
          # 환경변수가 필요한 경우와 아닌 경우 분리
          if [ "${{ matrix.needs_env }}" = "true" ]; then
            docker build -f ${{ matrix.dockerfile }} --build-arg NEXT_PUBLIC_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} --build-arg NEXT_PUBLIC_GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }} --build-arg NEXT_PUBLIC_GOOGLE_RESPONSE_TYPE=${{ secrets.GOOGLE_RESPONSE_TYPE }} --build-arg NEXT_PUBLIC_GOOGLE_SCOPE=${{ secrets.GOOGLE_SCOPE }} --build-arg NEXT_PUBLIC_GOOGLE_AUTH_URL=${{ secrets.GOOGLE_AUTH_URL }} -t $ECR_REGISTRY/${{ matrix.image }}:latest .
          else
            docker build -f ${{ matrix.dockerfile }} -t $ECR_REGISTRY/${{ matrix.image }}:latest .
          fi
          
          docker push $ECR_REGISTRY/${{ matrix.image }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    strategy:
      matrix:
        include:
          - image: users-app
          - image: admin-app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Prepare deployment files
        run: |
          # .env 파일 생성
          cat > .env << EOF
          KAKAO_REST_API_KEY=${{ secrets.KAKAO_REST_API_KEY }}
          ECR_REGISTRY=${{ secrets.ECR_REGISTRY }}
          NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
          NODE_ENV=production
          EOF

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # 배포 디렉토리 준비
            sudo rm -rf /home/ubuntu/apps/client
            mkdir -p /home/ubuntu/apps/client
            sudo chown -R ubuntu:ubuntu /home/ubuntu/apps/client

      - name: Copy deployment files
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: 'docker-compose.yml,.env'
          target: ~/apps/client

      - name: Deploy and restart containers
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd ~/apps/client

            # 환경변수 로드
            set -a && source .env && set +a

            # 로그 및 상태 출력
            echo "🚀 Deploying ${{ matrix.image }}"
            echo "📊 시스템 리소스 확인:"
            df -h / | head -2
            docker system df

            # Docker 정리 (주간 1회 또는 필요시)
            if [ $(date +%u) -eq 1 ] || [ $(df / | tail -1 | awk '{print $5}' | sed 's/%//') -gt 80 ]; then
              echo "🧹 Docker 리소스 정리 중..."
              docker system prune -af --volumes
            fi

            # ECR 로그인
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
            docker login --username AWS --password-stdin $ECR_REGISTRY

            # 이미지 풀 및 컨테이너 재시작
            echo "📦 이미지 풀링: ${{ matrix.image }}"
            docker pull $ECR_REGISTRY/${{ matrix.image }}:latest

            echo "🔄 컨테이너 재시작: ${{ matrix.image }}"
            docker compose down ${{ matrix.image }} 2>/dev/null || true
            docker compose up -d ${{ matrix.image }}

            # 배포 상태 확인
            echo "✅ 배포 완료 확인:"
            sleep 5
            docker compose ps ${{ matrix.image }}
            docker compose logs --tail=10 ${{ matrix.image }}

            echo "🎉 ${{ matrix.image }} 배포 완료!"