name: 'CI/CD: Build & Deploy to EC2 (ARM Optimized)'

on:
  push:
    branches: [develop, feature/#154-multi-arch-support]
    paths:
      - 'apps/**'
      - 'admin/**'
      - '.github/workflows/**'
      - 'docker-compose.yml'
      - 'package.json'
      - 'yarn.lock'

permissions:
  id-token: write
  contents: read

env:
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build-apps:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names users-app 2>/dev/null || \
          aws ecr create-repository --repository-name users-app

      # 🚀 ARM64 전용 QEMU 설정 (AMD64 제외)
      - name: Set up QEMU for ARM64
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # ARM64 전용 드라이버 최적화
          driver-opts: |
            network=host
            image=moby/buildkit:latest
          buildkitd-flags: |
            --max-parallelism 2

      # 🎯 ARM64 전용 빌드 (AMD64 제거로 50% 시간 단축)
      - name: Build and Push users-app (ARM64 Only)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/Dockerfile
          push: true
          platforms: linux/arm64  # AMD64 제거!
          tags: ${{ env.ECR_REGISTRY }}/users-app:latest
          cache-from: type=gha,scope=users-app-arm64
          cache-to: type=gha,mode=max,scope=users-app-arm64
          # Next.js ARM64 최적화
          build-args: |
            BUILDPLATFORM=linux/amd64
            TARGETPLATFORM=linux/arm64
            NEXT_PUBLIC_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            NEXT_PUBLIC_GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}
            NEXT_PUBLIC_GOOGLE_RESPONSE_TYPE=${{ secrets.GOOGLE_RESPONSE_TYPE }}
            NEXT_PUBLIC_GOOGLE_SCOPE=${{ secrets.GOOGLE_SCOPE }}
            NEXT_PUBLIC_GOOGLE_AUTH_URL=${{ secrets.GOOGLE_AUTH_URL }}

  build-admin:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names admin-app 2>/dev/null || \
          aws ecr create-repository --repository-name admin-app

      # 🚀 ARM64 전용 QEMU 설정
      - name: Set up QEMU for ARM64
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 🎯 ARM64 전용 빌드 (React SPA)
      - name: Build and Push admin-app (ARM64 Only)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: admin/Dockerfile
          push: true
          platforms: linux/arm64  # AMD64 제거!
          tags: ${{ env.ECR_REGISTRY }}/admin-app:latest
          cache-from: type=gha,scope=admin-app-arm64
          cache-to: type=gha,mode=max,scope=admin-app-arm64
          # React ARM64 최적화
          build-args: |
            BUILDPLATFORM=linux/amd64
            TARGETPLATFORM=linux/arm64

  prepare-deploy:
    runs-on: ubuntu-latest
    needs: [build-apps, build-admin]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Prepare deployment files
        run: |
          # .env 파일 생성
          cat > .env << EOF
          KAKAO_REST_API_KEY=${{ secrets.KAKAO_REST_API_KEY }}
          ECR_REGISTRY=${{ secrets.ECR_REGISTRY }}
          NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
          NODE_ENV=production
          TARGET_ARCH=arm64
          EOF

      - name: Prepare EC2 deployment directory
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: 54.180.126.213
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # 배포 디렉토리 정리 및 준비
            sudo rm -rf /home/ubuntu/apps/client
            mkdir -p /home/ubuntu/apps/client
            sudo chown -R ubuntu:ubuntu /home/ubuntu/apps/client
            
            # 🔍 ARM64 환경 확인
            echo "🏗️ 시스템 아키텍처: $(uname -m)"
            echo "🐳 Docker 아키텍처: $(docker version --format '{{.Server.Arch}}')"
            
            # Docker 리소스 정리 (조건부)
            DISK_USAGE=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
            if [ $(date +%u) -eq 1 ] || [ $DISK_USAGE -gt 80 ]; then
              echo "🧹 Docker 리소스 정리 중..."
              docker system prune -af --volumes
            fi

      - name: Copy deployment files
        uses: appleboy/scp-action@v0.1.4
        with:
          host: 54.180.126.213
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: 'docker-compose.yml,.env'
          target: ~/apps/client

  deploy:
    runs-on: ubuntu-latest
    needs: prepare-deploy
    strategy:
      matrix:
        include:
          - image: users-app
            service: users-app
            port: 3000
            type: nextjs
          - image: admin-app
            service: admin-app
            port: 3001
            type: react-spa
      max-parallel: 2  # 병렬 배포로 속도 향상

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      # 🚀 ARM64 최적화 배포
      - name: Deploy ARM64 optimized containers
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: 54.180.126.213
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd ~/apps/client

            # 환경변수 로드
            set -a && source .env && set +a

            echo "🚀 ARM64 배포 시작: ${{ matrix.service }} (${{ matrix.type }})"

            # ECR 로그인
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
            docker login --username AWS --password-stdin $ECR_REGISTRY

            # 🎯 ARM64 이미지 풀 (네이티브 실행으로 빠름)
            echo "📦 ARM64 이미지 풀링: ${{ matrix.image }}"
            docker pull $ECR_REGISTRY/${{ matrix.image }}:latest

            # 🔍 이미지 아키텍처 확인 (arm64 여야 함)
            IMAGE_ARCH=$(docker inspect $ECR_REGISTRY/${{ matrix.image }}:latest --format='{{.Architecture}}')
            echo "🏗️ 이미지 아키텍처: $IMAGE_ARCH"
            
            if [ "$IMAGE_ARCH" != "arm64" ]; then
              echo "❌ 경고: ARM64가 아닌 이미지 감지됨 ($IMAGE_ARCH)"
            else
              echo "✅ ARM64 네이티브 이미지 확인됨"
            fi

            echo "🔄 컨테이너 재시작: ${{ matrix.service }}"
            docker compose down ${{ matrix.service }} 2>/dev/null || true
            docker compose up -d ${{ matrix.service }}

            # 배포 상태 확인
            echo "✅ 배포 완료 확인:"
            sleep 10
            docker compose ps ${{ matrix.service }}
            docker compose logs --tail=10 ${{ matrix.service }}

            # ARM64 최적화 헬스체크
            echo "🏥 ARM64 헬스체크..."
            if [ "${{ matrix.type }}" = "nextjs" ]; then
              # Next.js SSR 확인
              for i in {1..6}; do
                if curl -f -s http://localhost:${{ matrix.port }} | grep -q "<html\|<!DOCTYPE"; then
                  echo "✅ Next.js ARM64 SSR 정상"
                  break
                else
                  echo "⏳ Next.js SSR 대기... ($i/6)"
                  sleep 10
                fi
              done
            else
              # React SPA 확인  
              for i in {1..3}; do
                if curl -f -s http://localhost:${{ matrix.port }} | grep -q "<div id=\"root\"\|<div id=\"app\""; then
                  echo "✅ React SPA ARM64 정상"
                  break
                else
                  echo "⏳ React SPA 대기... ($i/3)"
                  sleep 5
                fi
              done
            fi

            echo "🎉 ${{ matrix.service }} ARM64 배포 완료!"